package main

import (
	"flag"
	"fmt"
	"github.com/360EntSecGroup-Skylar/excelize"
	"os"
)

func main() {
	d := flag.Int("d", 4, "数据行")
	outTs := flag.String("outTs", "./ErrorDefine.ts", "输出ts文件")
	outGo := flag.String("outGo", "../constant/code.go", "输出go文件")
	i := flag.String("i", "./Error.xlsx", "配置表")

	flag.Parse()

	// 打开excel
	xlsx, err := excelize.OpenFile(*i)
	if err != nil {
		fmt.Printf("%s %s\n", *i, err)
		return
	}

	sheetName := xlsx.GetSheetName(1)
	var lines = xlsx.GetRows(sheetName)

	writeGoFile(*outGo, *d, lines, "// Code generated by error-gen. DO NOT EDIT.\npackage constant\n\nconst (\n", ")")
	writeTSFile(*outTs, *d, lines, "// Code generated by error-gen. DO NOT EDIT.\nexport enum ErrorDefine {\n", "}")
}

func writeTSFile(o string, d int, lines [][]string, startStr string, endStr string) {
	outStr := startStr
	for i, field := range lines {

		if d-1 <= i {
			outStr += "    " + formatBlank(fmt.Sprintf("%s = %s,", field[2], field[1]), 45) + "// " + field[5] + "\n"
		}
	}
	outStr = outStr + endStr
	file, err := os.OpenFile(o, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666) // 不存在创建清空内容覆写
	if err != nil {
		fmt.Println("open file failed. ", err.Error())
		return
	}
	defer file.Close()
	file.WriteString(outStr)
}

func writeGoFile(o string, d int, lines [][]string, startStr string, endStr string) {
	outStr := startStr
	for i, field := range lines {
		if d-1 <= i {
			outStr += "    " + formatBlank(fmt.Sprintf("%s = %s", field[2], field[1]), 45) + "// " + field[5] + "\n"
		}
	}
	outStr = outStr + endStr
	file, err := os.OpenFile(o, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666) // 不存在创建清空内容覆写
	if err != nil {
		fmt.Println("open file failed. ", err.Error())
		return
	}
	defer file.Close()
	file.WriteString(outStr)
}

func formatBlank(str string, max int) string {
	var length = len(str)
	if length < max {
		for i := 0; i < (max - length); i++ {
			str = str + " "
		}
	}
	return str
}
