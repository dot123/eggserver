
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type IEggScore struct {
    Id int32
    EggScore []float64
    OpenGroupId []int32
    GroupPb []int32
}

const TypeId_IEggScore = 1146752246

func (*IEggScore) GetTypeId() int32 {
    return 1146752246
}

func NewIEggScore(_buf map[string]interface{}) (_v *IEggScore, err error) {
    _v = &IEggScore{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["eggScore"].([]interface{}); !_ok_ { err = errors.New("eggScore error"); return }
    
                    _v.EggScore = make([]float64, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ float64
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = float64(_x_) }
                        _v.EggScore = append(_v.EggScore, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["openGroupId"].([]interface{}); !_ok_ { err = errors.New("openGroupId error"); return }
    
                    _v.OpenGroupId = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.OpenGroupId = append(_v.OpenGroupId, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["groupPb"].([]interface{}); !_ok_ { err = errors.New("groupPb error"); return }
    
                    _v.GroupPb = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.GroupPb = append(_v.GroupPb, _list_v_)
                    }
                }

    return
}

