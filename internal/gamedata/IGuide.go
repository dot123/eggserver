
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type IGuide struct {
    Id int32
    Cmd string
    Param []string
    GuideList []int32
}

const TypeId_IGuide = -2135879629

func (*IGuide) GetTypeId() int32 {
    return -2135879629
}

func NewIGuide(_buf map[string]interface{}) (_v *IGuide, err error) {
    _v = &IGuide{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.Cmd, _ok_ = _buf["cmd"].(string); !_ok_ { err = errors.New("cmd error"); return } }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["param"].([]interface{}); !_ok_ { err = errors.New("param error"); return }
    
                    _v.Param = make([]string, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ string
                        {  if _list_v_, _ok_ = _e_.(string); !_ok_ { err = errors.New("_list_v_ error"); return } }
                        _v.Param = append(_v.Param, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["guideList"].([]interface{}); !_ok_ { err = errors.New("guideList error"); return }
    
                    _v.GuideList = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.GuideList = append(_v.GuideList, _list_v_)
                    }
                }

    return
}

