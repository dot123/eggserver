
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type IBattleConfig struct {
    Id int32
    BattleName string
    Desc string
    Need []*GlobalItemData
    MatchTime int32
    PlayerNum int32
    RoundTimes []int32
    RoundInterval int32
    GridNum int32
    TotalBonus int32
    TotalRound int32
    Reward []*GlobalItemData
    Bg string
    AddRobot int32
    CanExit int32
    IsOpen int32
    IsGuide int32
}

const TypeId_IBattleConfig = 1955824899

func (*IBattleConfig) GetTypeId() int32 {
    return 1955824899
}

func NewIBattleConfig(_buf map[string]interface{}) (_v *IBattleConfig, err error) {
    _v = &IBattleConfig{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.BattleName, _ok_ = _buf["battleName"].(string); !_ok_ { err = errors.New("battleName error"); return } }
    { var _ok_ bool; if _v.Desc, _ok_ = _buf["desc"].(string); !_ok_ { err = errors.New("desc error"); return } }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["need"].([]interface{}); !_ok_ { err = errors.New("need error"); return }
    
                    _v.Need = make([]*GlobalItemData, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ *GlobalItemData
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = NewGlobalItemData(_x_); err != nil { return } }
                        _v.Need = append(_v.Need, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["matchTime"].(float64); !_ok_ { err = errors.New("matchTime error"); return }; _v.MatchTime = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["playerNum"].(float64); !_ok_ { err = errors.New("playerNum error"); return }; _v.PlayerNum = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["roundTimes"].([]interface{}); !_ok_ { err = errors.New("roundTimes error"); return }
    
                    _v.RoundTimes = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.RoundTimes = append(_v.RoundTimes, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["roundInterval"].(float64); !_ok_ { err = errors.New("roundInterval error"); return }; _v.RoundInterval = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["gridNum"].(float64); !_ok_ { err = errors.New("gridNum error"); return }; _v.GridNum = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["totalBonus"].(float64); !_ok_ { err = errors.New("totalBonus error"); return }; _v.TotalBonus = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["totalRound"].(float64); !_ok_ { err = errors.New("totalRound error"); return }; _v.TotalRound = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["reward"].([]interface{}); !_ok_ { err = errors.New("reward error"); return }
    
                    _v.Reward = make([]*GlobalItemData, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ *GlobalItemData
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = NewGlobalItemData(_x_); err != nil { return } }
                        _v.Reward = append(_v.Reward, _list_v_)
                    }
                }

    { var _ok_ bool; if _v.Bg, _ok_ = _buf["bg"].(string); !_ok_ { err = errors.New("bg error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["addRobot"].(float64); !_ok_ { err = errors.New("addRobot error"); return }; _v.AddRobot = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["canExit"].(float64); !_ok_ { err = errors.New("canExit error"); return }; _v.CanExit = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["isOpen"].(float64); !_ok_ { err = errors.New("isOpen error"); return }; _v.IsOpen = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["isGuide"].(float64); !_ok_ { err = errors.New("isGuide error"); return }; _v.IsGuide = int32(_tempNum_) }
    return
}

