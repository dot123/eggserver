
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type IGuideList struct {
    Id int32
    Desc string
    IsSave int32
    Condition []string
    Action []string
    DialogOffset []int32
    FingerOffset []int32
    MaskOffset []int32
    MaskSize []int32
    Param string
}

const TypeId_IGuideList = -1533287567

func (*IGuideList) GetTypeId() int32 {
    return -1533287567
}

func NewIGuideList(_buf map[string]interface{}) (_v *IGuideList, err error) {
    _v = &IGuideList{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.Desc, _ok_ = _buf["desc"].(string); !_ok_ { err = errors.New("desc error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["isSave"].(float64); !_ok_ { err = errors.New("isSave error"); return }; _v.IsSave = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["condition"].([]interface{}); !_ok_ { err = errors.New("condition error"); return }
    
                    _v.Condition = make([]string, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ string
                        {  if _list_v_, _ok_ = _e_.(string); !_ok_ { err = errors.New("_list_v_ error"); return } }
                        _v.Condition = append(_v.Condition, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["action"].([]interface{}); !_ok_ { err = errors.New("action error"); return }
    
                    _v.Action = make([]string, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ string
                        {  if _list_v_, _ok_ = _e_.(string); !_ok_ { err = errors.New("_list_v_ error"); return } }
                        _v.Action = append(_v.Action, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["dialogOffset"].([]interface{}); !_ok_ { err = errors.New("dialogOffset error"); return }
    
                    _v.DialogOffset = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.DialogOffset = append(_v.DialogOffset, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["fingerOffset"].([]interface{}); !_ok_ { err = errors.New("fingerOffset error"); return }
    
                    _v.FingerOffset = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.FingerOffset = append(_v.FingerOffset, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["maskOffset"].([]interface{}); !_ok_ { err = errors.New("maskOffset error"); return }
    
                    _v.MaskOffset = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.MaskOffset = append(_v.MaskOffset, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["maskSize"].([]interface{}); !_ok_ { err = errors.New("maskSize error"); return }
    
                    _v.MaskSize = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.MaskSize = append(_v.MaskSize, _list_v_)
                    }
                }

    { var _ok_ bool; if _v.Param, _ok_ = _buf["param"].(string); !_ok_ { err = errors.New("param error"); return } }
    return
}

