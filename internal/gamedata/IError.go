
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type IError struct {
    Id int32
    Code string
    Show int32
    Content string
    Pos int32
    Button []string
    ClickVoidClose int32
    Align int32
}

const TypeId_IError = -2137807041

func (*IError) GetTypeId() int32 {
    return -2137807041
}

func NewIError(_buf map[string]interface{}) (_v *IError, err error) {
    _v = &IError{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.Code, _ok_ = _buf["code"].(string); !_ok_ { err = errors.New("code error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["show"].(float64); !_ok_ { err = errors.New("show error"); return }; _v.Show = int32(_tempNum_) }
    { var _ok_ bool; if _v.Content, _ok_ = _buf["content"].(string); !_ok_ { err = errors.New("content error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["pos"].(float64); !_ok_ { err = errors.New("pos error"); return }; _v.Pos = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["button"].([]interface{}); !_ok_ { err = errors.New("button error"); return }
    
                    _v.Button = make([]string, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ string
                        {  if _list_v_, _ok_ = _e_.(string); !_ok_ { err = errors.New("_list_v_ error"); return } }
                        _v.Button = append(_v.Button, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["clickVoidClose"].(float64); !_ok_ { err = errors.New("clickVoidClose error"); return }; _v.ClickVoidClose = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["align"].(float64); !_ok_ { err = errors.New("align error"); return }; _v.Align = int32(_tempNum_) }
    return
}

