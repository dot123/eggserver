
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type IGlobal struct {
    LayEggTime int32
    VitMinMax []int32
    VitMaxAuto int32
    InitVit int32
    VitAddAuto int32
    GoldMinmax []int32
    InitGold int32
    InitDiamond int32
    ClickLayEgg int32
    ClickTakeOffVit int32
    ShareEggScore float64
    ShareEggReward *GlobalItemData
    InvitedReward *GlobalItemData
    ShareFriendsUrl string
    ShareFriendsText string
    ShopRefresh []*GlobalItemData
    SharePetScore float64
    SharePetReward *GlobalItemData
    BuyShopRetrieveCard []int32
    LeaderboardExpiration int32
    SignCardRewardTimes int32
}

const TypeId_IGlobal = -1795893940

func (*IGlobal) GetTypeId() int32 {
    return -1795893940
}

func NewIGlobal(_buf map[string]interface{}) (_v *IGlobal, err error) {
    _v = &IGlobal{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["lay_egg_time"].(float64); !_ok_ { err = errors.New("lay_egg_time error"); return }; _v.LayEggTime = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["vit_min_max"].([]interface{}); !_ok_ { err = errors.New("vit_min_max error"); return }
    
                    _v.VitMinMax = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.VitMinMax = append(_v.VitMinMax, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["vit_max_auto"].(float64); !_ok_ { err = errors.New("vit_max_auto error"); return }; _v.VitMaxAuto = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["init_vit"].(float64); !_ok_ { err = errors.New("init_vit error"); return }; _v.InitVit = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["vit_add_auto"].(float64); !_ok_ { err = errors.New("vit_add_auto error"); return }; _v.VitAddAuto = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["gold_minmax"].([]interface{}); !_ok_ { err = errors.New("gold_minmax error"); return }
    
                    _v.GoldMinmax = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.GoldMinmax = append(_v.GoldMinmax, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["init_gold"].(float64); !_ok_ { err = errors.New("init_gold error"); return }; _v.InitGold = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["init_diamond"].(float64); !_ok_ { err = errors.New("init_diamond error"); return }; _v.InitDiamond = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["click_lay_egg"].(float64); !_ok_ { err = errors.New("click_lay_egg error"); return }; _v.ClickLayEgg = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["click_take_off_vit"].(float64); !_ok_ { err = errors.New("click_take_off_vit error"); return }; _v.ClickTakeOffVit = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["share_egg_score"].(float64); !_ok_ { err = errors.New("share_egg_score error"); return }; _v.ShareEggScore = float64(_tempNum_) }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["share_egg_reward"].(map[string]interface{}); !_ok_ { err = errors.New("share_egg_reward error"); return }; if _v.ShareEggReward, err = NewGlobalItemData(_x_); err != nil { return } }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["invited_reward"].(map[string]interface{}); !_ok_ { err = errors.New("invited_reward error"); return }; if _v.InvitedReward, err = NewGlobalItemData(_x_); err != nil { return } }
    { var _ok_ bool; if _v.ShareFriendsUrl, _ok_ = _buf["share_friends_url"].(string); !_ok_ { err = errors.New("share_friends_url error"); return } }
    { var _ok_ bool; if _v.ShareFriendsText, _ok_ = _buf["share_friends_text"].(string); !_ok_ { err = errors.New("share_friends_text error"); return } }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["shop_refresh"].([]interface{}); !_ok_ { err = errors.New("shop_refresh error"); return }
    
                    _v.ShopRefresh = make([]*GlobalItemData, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ *GlobalItemData
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v_ error"); return }; if _list_v_, err = NewGlobalItemData(_x_); err != nil { return } }
                        _v.ShopRefresh = append(_v.ShopRefresh, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["share_pet_score"].(float64); !_ok_ { err = errors.New("share_pet_score error"); return }; _v.SharePetScore = float64(_tempNum_) }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["share_pet_reward"].(map[string]interface{}); !_ok_ { err = errors.New("share_pet_reward error"); return }; if _v.SharePetReward, err = NewGlobalItemData(_x_); err != nil { return } }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["buyShopRetrieveCard"].([]interface{}); !_ok_ { err = errors.New("buyShopRetrieveCard error"); return }
    
                    _v.BuyShopRetrieveCard = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.BuyShopRetrieveCard = append(_v.BuyShopRetrieveCard, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["leaderboard_expiration"].(float64); !_ok_ { err = errors.New("leaderboard_expiration error"); return }; _v.LeaderboardExpiration = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["SignCardRewardTimes"].(float64); !_ok_ { err = errors.New("SignCardRewardTimes error"); return }; _v.SignCardRewardTimes = int32(_tempNum_) }
    return
}

