
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type IDailyShop struct {
    Id int32
    Desc string
    Name string
    GroupId int32
    Weight int32
    Item *GlobalItemData
    Price *GlobalItemData
    Discount []int32
    BuyLimit int32
    Share int32
    Bg string
    Icon string
}

const TypeId_IDailyShop = -654648730

func (*IDailyShop) GetTypeId() int32 {
    return -654648730
}

func NewIDailyShop(_buf map[string]interface{}) (_v *IDailyShop, err error) {
    _v = &IDailyShop{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.Desc, _ok_ = _buf["desc"].(string); !_ok_ { err = errors.New("desc error"); return } }
    { var _ok_ bool; if _v.Name, _ok_ = _buf["name"].(string); !_ok_ { err = errors.New("name error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["groupId"].(float64); !_ok_ { err = errors.New("groupId error"); return }; _v.GroupId = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["weight"].(float64); !_ok_ { err = errors.New("weight error"); return }; _v.Weight = int32(_tempNum_) }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["item"].(map[string]interface{}); !_ok_ { err = errors.New("item error"); return }; if _v.Item, err = NewGlobalItemData(_x_); err != nil { return } }
    { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _buf["price"].(map[string]interface{}); !_ok_ { err = errors.New("price error"); return }; if _v.Price, err = NewGlobalItemData(_x_); err != nil { return } }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["discount"].([]interface{}); !_ok_ { err = errors.New("discount error"); return }
    
                    _v.Discount = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.Discount = append(_v.Discount, _list_v_)
                    }
                }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["buyLimit"].(float64); !_ok_ { err = errors.New("buyLimit error"); return }; _v.BuyLimit = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["share"].(float64); !_ok_ { err = errors.New("share error"); return }; _v.Share = int32(_tempNum_) }
    { var _ok_ bool; if _v.Bg, _ok_ = _buf["bg"].(string); !_ok_ { err = errors.New("bg error"); return } }
    { var _ok_ bool; if _v.Icon, _ok_ = _buf["icon"].(string); !_ok_ { err = errors.New("icon error"); return } }
    return
}

